# Holden Ernest - 5/12/2025
# A Flask based web server for LupuVault
# Production uses a wsgi to serve this

from flask import *
from flask_socketio import SocketIO, send, emit
import os
import sys

# src/ MODULES
sys.path.insert(0, '/home/lupu/LupuVault/src')
import database
import secretkeys
import apis

# load the .env variables into the environment
from dotenv import load_dotenv
load_dotenv()

# ensure the templates know the mime types of the downloaded script files
import mimetypes
mimetypes.add_type('application/javascript', '.js')
mimetypes.add_type('application/typescript', '.ts')

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('FLASK_KEY')
app.config["SESSION_PERMANENT"] = True
socketio = SocketIO(app)

def getUsername():
    return session["username"]

def getPassword():
    return session["password"]

def signedIn():
    """Check to make sure the user is signed in on the session variable"""
    if (not "username" in session or not "password" in session):
        return False
    return database.hasUser(session["username"], session["password"])

def createNotification(status, message):
    apis.saveNotification(getUsername(), status, message)

### APP WEB PAGES
@app.route('/<path:path>/')
def redirect_trailing_slash(path):
    """Redirect any sites that end in a '/' to go to the page that doesnt have a '/'"""
    return redirect('/' + path)

@app.route("/")
def indexPage():
    """Go to your default list"""
    if (not signedIn()):
        return redirect("/login") #! warning noti
    return render_template("listView.html")

### APIS
@app.route("/api/notifications/<user>")
def getNotifications(user):
    """Returns a json list of all notifications, to be grabbed from ajax calls"""
    apis.getNotifications(user)

@app.route("/list/<owner>/<listname>")
def getList(owner, listname):
    """Strictly API route"""
    if (not signedIn()):
        return redirect("/login") #! warning noti
    currentUser = getUsername()
    
    return jsonify(database.getListDict(currentUser, owner, listname))

### END APIS

@app.route("/login", methods=['get'])
def loginPageGet():
    """Send the Login Page to the User"""
    return render_template("login.html")

@app.route("/login", methods=['post'])
def loginPagePost():
    """Get the login info back from the user"""
    username = request.form.get('username', False)
    password = request.form.get('password', False)

    if (not username or not password):
        return redirect("/login") #! warning noti

    if (database.hasUser(username, password)):
        session["username"] = username
        session["password"] = password
        return redirect("/")

    return redirect("/login") #! warning noti

@app.route("/newuser")
def generateURL():
    """Generate a new user URL if you can"""
    if (not signedIn()):
        return redirect("/login")
    
    username = session["username"]
    _ul = database.getUserLevel(username)
    if (not _ul == "admin" and not _ul == "owner"):
        return render_template("errors/incorrectPerms.html")
    
    key = secretkeys.newOTUserKey("normal")
    normalkeyurl = request.url + "/" + key
    adminkeyurl = ""
    if (_ul == "owner"):
        adminkey = secretkeys.newOTUserKey("admin")
        adminkeyurl = request.url + "/" + adminkey
    return render_template("generateURL.html", normalkeyurl=normalkeyurl, adminkeyurl=adminkeyurl)

@app.route("/newuser/<key>", methods=['get'])
def newUserGet(key):
    """ensure the key is real, allow the user to post a username and password to be associated with the one time key"""
    if (not secretkeys.hasOTUserKey(key)):
        return render_template("errors/incorrectKey.html")
    return render_template("addUser.html")

@app.route("/newuser/<key>", methods=['post'])
def newUserPost(key):
    """A limited time access url with a key generated by an _admin_ user that allows for a new user to be created"""
    username = request.form['username']
    password = request.form['password']

    madeUser = database.hasUsername(username) #TODO: do some kinda ajax instead
    if (madeUser):
        return redirect(request.url)

    keyInfo = secretkeys.useOTUserKey(key) # only remove the key when the user is made
    if (not keyInfo):
        return render_template("errors/incorrectKey.html")
    
    madeUser = database.createUser(username, password, keyInfo["userlevel"])
    
    return redirect("/login")

if __name__ == '__main__':
    socketio.run(app, debug=True, port=2001) # debug=True, ssl_context=('./cert.pem', './key.pem')
# Enable the venv: $ source <PATH>/LupuVault/.venv/bin/activate